{
  "version": 3,
  "file": "ngx-file-drop.umd.min.js",
  "sources": [
    "ng://ngx-file-drop/out/src/lib/ngx-drop/upload-file.model.ts",
    "ng://ngx-file-drop/out/src/lib/ngx-drop/upload-event.model.ts",
    "ng://ngx-file-drop/out/src/lib/ngx-drop/file-drop.component.ts",
    "ng://ngx-file-drop/out/src/lib/ngx-drop/file-drop.module.ts"
  ],
  "sourcesContent": [
    "import { FileSystemEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\r\nexport class UploadFile {\r\n    constructor(\r\n        public relativePath: string,\r\n        public fileEntry: FileSystemEntry) {\r\n    }\r\n}\r\n",
    "import { UploadFile } from './upload-file.model';\r\n\r\nexport class UploadEvent {\r\n    constructor(\r\n        public files: UploadFile[]) {\r\n    }\r\n}\r\n",
    "import { Component, Input, Output, EventEmitter, NgZone, OnDestroy, Renderer } from '@angular/core';\r\nimport { timer, Subscription } from 'rxjs';\r\n\r\nimport { UploadFile } from './upload-file.model';\r\nimport { UploadEvent } from './upload-event.model';\r\nimport { FileSystemFileEntry, FileSystemEntryMetadata, FileSystemEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n@Component({\r\n  selector: 'file-drop',\r\n  template: `<div id=\"dropZone\"  [className]=\"customstyle\" [class.over]=\"dragoverflag\"\r\n    (drop)=\"dropFiles($event)\"\r\n    (dragover)=\"onDragOver($event)\" (dragleave)=\"onDragLeave($event)\">\r\n    <div class=\"content\">\r\n        <ng-content></ng-content>\r\n        {{headertext}}\r\n    </div>\r\n</div>\r\n`,\r\n  styles: [`.drop-zone{margin:auto;height:100px;border:2px dotted #0782d0;border-radius:30px}.content{color:#0782d0;height:100px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.over{background-color:rgba(147,147,147,.5)}`]\r\n})\r\n\r\n\r\nexport class FileComponent implements OnDestroy {\r\n\r\n  @Input()\r\n  headertext: string = '';\r\n  @Input()\r\n  customstyle: string = null;\r\n  @Input()\r\n  disableIf: boolean = false;\r\n\r\n  @Output()\r\n  public onFileDrop: EventEmitter<UploadEvent> = new EventEmitter<UploadEvent>();\r\n  @Output()\r\n  public onFileOver: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output()\r\n  public onFileLeave: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  stack = [];\r\n  files: UploadFile[] = [];\r\n  subscription: Subscription;\r\n  dragoverflag: boolean = false;\r\n\r\n  globalDisable: boolean = false;\r\n  globalStart: Function;\r\n  globalEnd: Function;\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private renderer: Renderer\r\n  ) {\r\n    if (!this.customstyle) {\r\n      this.customstyle = 'drop-zone';\r\n    }\r\n    this.globalStart = this.renderer.listen('document', 'dragstart', (evt) => {\r\n      this.globalDisable = true;\r\n    });\r\n    this.globalEnd = this.renderer.listen('document', 'dragend', (evt) => {\r\n      this.globalDisable = false;\r\n    });\r\n  }\r\n\r\n  public onDragOver(event: Event): void {\r\n    if (!this.globalDisable && !this.disableIf) {\r\n      if (!this.dragoverflag) {\r\n        this.dragoverflag = true;\r\n        this.onFileOver.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public onDragLeave(event: Event): void {\r\n    if (!this.globalDisable && !this.disableIf) {\r\n      if (this.dragoverflag) {\r\n        this.dragoverflag = false;\r\n        this.onFileLeave.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  dropFiles(event: any) {\r\n    if (!this.globalDisable && !this.disableIf) {\r\n      this.dragoverflag = false;\r\n      event.dataTransfer.dropEffect = 'copy';\r\n      let length;\r\n      if (event.dataTransfer.items) {\r\n        length = event.dataTransfer.items.length;\r\n      } else {\r\n        length = event.dataTransfer.files.length;\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        let entry: FileSystemEntry;\r\n        if (event.dataTransfer.items) {\r\n          if (event.dataTransfer.items[i].webkitGetAsEntry) {\r\n            entry = event.dataTransfer.items[i].webkitGetAsEntry();\r\n          }\r\n        } else {\r\n          if (event.dataTransfer.files[i].webkitGetAsEntry) {\r\n            entry = event.dataTransfer.files[i].webkitGetAsEntry();\r\n          }\r\n        }\r\n        if (!entry) {\r\n          const file: File = event.dataTransfer.files[i];\r\n          if (file) {\r\n            const fakeFileEntry: FileSystemFileEntry = {\r\n              name: file.name,\r\n              isDirectory: false,\r\n              isFile: true,\r\n              file: (callback: (filea: File) => void): void => {\r\n                callback(file)\r\n              }\r\n            }\r\n            const toUpload: UploadFile = new UploadFile(fakeFileEntry.name, fakeFileEntry);\r\n            this.addToQueue(toUpload);\r\n          }\r\n        } else {\r\n          if (entry.isFile) {\r\n            const toUpload: UploadFile = new UploadFile(entry.name, entry);\r\n            this.addToQueue(toUpload);\r\n          } else if (entry.isDirectory) {\r\n            this.traverseFileTree(entry, entry.name);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.preventAndStop(event);\r\n\r\n      const timerObservable = timer(200, 200);\r\n      this.subscription = timerObservable.subscribe(t => {\r\n        if (this.stack.length === 0) {\r\n          this.onFileDrop.emit(new UploadEvent(this.files));\r\n          this.files = [];\r\n          this.subscription.unsubscribe();\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  private traverseFileTree(item: FileSystemEntry, path: string) {\r\n\r\n    if (item.isFile) {\r\n      const toUpload: UploadFile = new UploadFile(path, item);\r\n      this.files.push(toUpload);\r\n      this.zone.run(() => {\r\n        this.popToStack();\r\n      });\r\n    } else {\r\n      this.pushToStack(path);\r\n      path = path + '/';\r\n      const dirReader = (item as FileSystemDirectoryEntry).createReader();\r\n      let entries = [];\r\n      const thisObj = this;\r\n\r\n      const readEntries = function () {\r\n        dirReader.readEntries(function (res) {\r\n          if (!res.length) {\r\n            // add empty folders\r\n            if (entries.length === 0) {\r\n              const toUpload: UploadFile = new UploadFile(path, item);\r\n              thisObj.zone.run(() => {\r\n                thisObj.addToQueue(toUpload);\r\n              });\r\n            } else {\r\n              for (let i = 0; i < entries.length; i++) {\r\n                thisObj.zone.run(() => {\r\n                  thisObj.traverseFileTree(entries[i], path + entries[i].name);\r\n                });\r\n              }\r\n            }\r\n            thisObj.zone.run(() => {\r\n              thisObj.popToStack();\r\n            });\r\n          } else {\r\n            // continue with the reading\r\n            entries = entries.concat(res);\r\n            readEntries();\r\n          }\r\n        });\r\n      };\r\n\r\n      readEntries();\r\n    }\r\n  }\r\n\r\n  private addToQueue(item: UploadFile) {\r\n    this.files.push(item);\r\n  }\r\n\r\n  pushToStack(str) {\r\n    this.stack.push(str);\r\n  }\r\n\r\n  popToStack() {\r\n    const value = this.stack.pop();\r\n  }\r\n\r\n  private clearQueue() {\r\n    this.files = [];\r\n  }\r\n\r\n  private preventAndStop(event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n    this.globalStart();\r\n    this.globalEnd();\r\n  }\r\n}\r\n",
    "import { NgModule } from '@angular/core';\r\nimport {FileComponent} from './file-drop.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FileComponent,\r\n  ],\r\n  exports: [FileComponent],\r\n  imports: [],\r\n  providers: [],\r\n  bootstrap: [FileComponent],\r\n})\r\nexport class FileDropModule {}\r\n"
  ],
  "names": [
    "UploadFile",
    "relativePath",
    "fileEntry",
    "this",
    "UploadEvent",
    "files",
    "FileComponent",
    "zone",
    "renderer",
    "_this",
    "headertext",
    "customstyle",
    "disableIf",
    "onFileDrop",
    "EventEmitter",
    "onFileOver",
    "onFileLeave",
    "stack",
    "dragoverflag",
    "globalDisable",
    "globalStart",
    "listen",
    "evt",
    "globalEnd",
    "prototype",
    "onDragOver",
    "event",
    "emit",
    "preventAndStop",
    "onDragLeave",
    "dropFiles",
    "dataTransfer",
    "dropEffect",
    "length",
    "items",
    "_loop_1",
    "i",
    "entry",
    "webkitGetAsEntry",
    "isFile",
    "toUpload",
    "name",
    "this_1",
    "addToQueue",
    "isDirectory",
    "traverseFileTree",
    "file_1",
    "fakeFileEntry",
    "file",
    "callback",
    "timerObservable",
    "timer",
    "subscription",
    "subscribe",
    "t",
    "unsubscribe",
    "item",
    "path",
    "push",
    "run",
    "popToStack",
    "pushToStack",
    "dirReader_1",
    "createReader",
    "entries_1",
    "thisObj_1",
    "readEntries_1",
    "readEntries",
    "res",
    "concat",
    "toUpload_1",
    "_loop_2",
    "str",
    "pop",
    "clearQueue",
    "stopPropagation",
    "preventDefault",
    "ngOnDestroy",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "NgZone",
    "Renderer",
    "Input",
    "Output",
    "FileDropModule",
    "NgModule",
    "declarations",
    "exports",
    "imports",
    "providers",
    "bootstrap"
  ],
  "mappings": "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"
}
